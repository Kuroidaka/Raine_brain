generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Task {
  id          String           @id @default(uuid())
  title       String           @db.LongText
  color       String?
  deadline    DateTime?
  note        String?          @db.LongText
  area        TaskAreas[]
  subTask     SubTask[]
  userId      String
  status      Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  user      User  @relation(fields: [userId], references: [id])
}

model SubTask {
  id        String           @id @default(uuid())
  title     String           @db.LongText
  status    Boolean          @default(false)
  taskId    String

  task      Task  @relation(fields: [taskId], references: [id])
}

model TaskAreas {
  taskId     String
  area       Areas
  task       Task    @relation(fields: [taskId], references: [id])

  @@id([taskId, area])
}

enum Areas {
  health
  play
  spirituality
  environment
  work
  finance
  development
  relationships
}

model File {
  id        String   @id
  name      String   @unique
  path      String
  extension String
  size      Int
  url       String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id             String           @id @default(uuid())
  name           String           @unique
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now())
  User           User[]
}

model User {
  id            String   @id @default(uuid())
  display_name  String?
  username      String   @unique
  password      String
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
  role_id       String?
  Role          Role?    @relation(fields: [role_id], references: [id])
  conversations Conversation[]
  Task          Task[]

  @@index([role_id], map: "Role_role_id_fkey")
}

model Conversation {
  id            String    @id @default(uuid())
  name          String    @default("New Chat")
  from          String?
  summarize     String?   @db.LongText
  lastMessage   String?   @db.LongText
  lastMessageAt DateTime?  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  messages      Message[]
  userID        String
  user          User       @relation(fields: [userID], references: [id])

  @@index([userID], map: "Conversation_userID_fkey")

}

model Message {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  text           String       @db.LongText
  isBot          Boolean
  userID         String
  functionList   String?      @db.LongText
  conversationId String
  imgList        ImageFile[]
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@index([conversationId], map: "Message_conversationId_fkey")
}

model ImageFile {
  id        String   @id
  url       String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messageId String
  message   Message  @relation(fields: [messageId], references: [id])

  @@index([messageId], map: "ImageFile_messageId_fkey")
}
