generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Task {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title         String    @db.LongText
  color         String?
  deadline      DateTime
  note          String?   @db.LongText
  status        Boolean   @default(false)
  googleEventId String?    @db.LongText

  subTask SubTask[]
  area    TaskAreas[]
  taskAttachment TaskAttachment[]
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId], map: "Task_userId_fkey")
}

model TaskAttachment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  name      String
  url       String   @db.LongText
  type      String
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])
  
}

model SubTask {
  id        String   @id @default(uuid())
  title     String   @db.LongText
  status    Boolean  @default(false)
  taskId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  task      Task     @relation(fields: [taskId], references: [id])

  @@index([taskId], map: "SubTask_taskId_fkey")
}

model TaskAreas {
  taskId String
  area   Areas
  task   Task   @relation(fields: [taskId], references: [id])

  @@id([taskId, area])
}

model GoalAreas {
  goalId String
  area   Areas
  goal   Goal   @relation(fields: [goalId], references: [id])

  @@id([goalId, area])
}

model RoutineAreas {
  routineId String
  area      Areas
  routine   Routine @relation(fields: [routineId], references: [id])

  @@id([routineId, area])
}

model Routine {
  id          String         @id @default(uuid())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  title       String         @db.LongText
  color       String?
  note        String?        @db.LongText
  isActive    Boolean        @default(true)
  routineTime String
  googleEventId String?      @db.LongText

  area        RoutineAreas[]
  routineDate RoutineDate[]

  userId      String
  user        User           @relation(fields: [userId], references: [id])

  @@index([userId], map: "Routine_userId_fkey")
}

model Goal {
  id        String      @id @default(uuid())
  title     String      @db.LongText
  color     String?
  note      String?     @db.LongText
  userId    String
  percent   Decimal
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  area      GoalAreas[]

  @@index([userId], map: "Goal_userId_fkey")
}

model RoutineDate {
  id              String   @id @default(uuid())
  routineID       String
  completion_date DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  routine         Routine  @relation(fields: [routineID], references: [id])

  @@index([routineID], map: "RoutineDate_routineID_fkey")
}

model File {
  id        String   @id @default(uuid())
  name      String   @unique
  originalname String
  path      String
  extension String
  size      Int
  url       String   @db.LongText
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  vectorDBIds Json?
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId], map: "File_userId_fkey")
}

model Role {
  id         String   @id @default(uuid())
  name       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  User       User[]
}

model User {
  id                String   @id @default(uuid())
  display_name      String?
  username          String   @unique
  password          String
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())
  role_id           String?
  bg_id             String?
  gmail             String?
  googleCredentials String?  @db.LongText
  eventListId       String?
  
  files             File[]
  conversations Conversation[]
  Goal          Goal[]
  Routine       Routine[]
  Task          Task[]
  aiTools       UserOnAiTools[]

  backgroundImage backgroundImage? @relation(fields: [bg_id], references: [id])
  Role            Role?            @relation(fields: [role_id], references: [id])

  @@index([role_id], map: "Role_role_id_fkey")
  @@index([bg_id], map: "User_bg_id_fkey")
}

model Conversation {
  id            String    @id @default(uuid())
  name          String    @default("New Chat")
  from          String?
  summarize     String?   @db.LongText
  lastMessage   String?   @db.LongText
  lastMessageAt DateTime? @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userID        String
  user          User      @relation(fields: [userID], references: [id])
  messages      Message[]
  files         File[]

  @@index([userID], map: "Conversation_userID_fkey")
}
model Message {
  id             String           @id @default(uuid())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  text           String           @db.LongText
  isBot          Boolean
  userID         String
  conversationId String
  imgList        ImageFile[]
  conversation   Conversation     @relation(fields: [conversationId], references: [id])
  functionData   MessageFuntion[]
  videoRecord    VideoRecord?
  relatedMemo    Json?
  memoStorage    Json?

  @@index([conversationId], map: "Message_conversationId_fkey")

}

model VideoRecord {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  url       String   @db.LongText

  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String   @unique

  @@index([messageId], map: "VideoRecord_messageId_fkey")
}


model MessageFuntion {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  data      String?  @db.LongText
  comment   String?  @db.LongText
  messageId String
  message   Message  @relation(fields: [messageId], references: [id])

  @@index([messageId], map: "MessageFuntion_messageId_fkey")
}

model AiTool {
  id          String          @id @default(uuid())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  name        String
  description String          @db.LongText
  users       UserOnAiTools[]
}

model UserOnAiTools {
  userId     String
  aiToolId   String
  assignedAt DateTime @default(now())
  aiTool     AiTool   @relation(fields: [aiToolId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, aiToolId])
  @@index([aiToolId], map: "UserOnAiTools_aiToolId_fkey")
}

model backgroundImage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  urlPath   String?  @db.LongText
  extname   String
  users     User[]
}

model ImageFile {
  id        String   @id @default(uuid())
  url       String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messageId String
  message   Message  @relation(fields: [messageId], references: [id])

  @@index([messageId], map: "ImageFile_messageId_fkey")
}

enum Areas {
  health
  play
  spirituality
  environment
  work
  finance
  development
  relationships
}
